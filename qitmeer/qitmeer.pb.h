// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qitmeer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_qitmeer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_qitmeer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_qitmeer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_qitmeer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qitmeer_2eproto;
namespace sharebase {
class BitcoinMsg;
class BitcoinMsgDefaultTypeInternal;
extern BitcoinMsgDefaultTypeInternal _BitcoinMsg_default_instance_;
}  // namespace sharebase
PROTOBUF_NAMESPACE_OPEN
template<> ::sharebase::BitcoinMsg* Arena::CreateMaybeMessage<::sharebase::BitcoinMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sharebase {

// ===================================================================

class BitcoinMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sharebase.BitcoinMsg) */ {
 public:
  BitcoinMsg();
  virtual ~BitcoinMsg();

  BitcoinMsg(const BitcoinMsg& from);
  BitcoinMsg(BitcoinMsg&& from) noexcept
    : BitcoinMsg() {
    *this = ::std::move(from);
  }

  inline BitcoinMsg& operator=(const BitcoinMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitcoinMsg& operator=(BitcoinMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitcoinMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitcoinMsg* internal_default_instance() {
    return reinterpret_cast<const BitcoinMsg*>(
               &_BitcoinMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BitcoinMsg& a, BitcoinMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BitcoinMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitcoinMsg* New() const final {
    return CreateMaybeMessage<BitcoinMsg>(nullptr);
  }

  BitcoinMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitcoinMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitcoinMsg& from);
  void MergeFrom(const BitcoinMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitcoinMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sharebase.BitcoinMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_qitmeer_2eproto);
    return ::descriptor_table_qitmeer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 6,
    kWorkerhashidFieldNumber = 2,
    kVersionFieldNumber = 1,
    kUseridFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kStatusFieldNumber = 4,
    kBlkbitsFieldNumber = 9,
    kJobidFieldNumber = 7,
    kSharediffFieldNumber = 8,
    kHeightFieldNumber = 10,
    kNonceFieldNumber = 11,
    kSessionidFieldNumber = 12,
    kVersionmaskFieldNumber = 13,
    kExtuseridFieldNumber = 14,
    kBitsreachedFieldNumber = 15,
  };
  // optional string ip = 6;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional sint64 workerhashid = 2;
  bool has_workerhashid() const;
  private:
  bool _internal_has_workerhashid() const;
  public:
  void clear_workerhashid();
  ::PROTOBUF_NAMESPACE_ID::int64 workerhashid() const;
  void set_workerhashid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_workerhashid() const;
  void _internal_set_workerhashid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required sint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 userid = 3;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint64 timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sint32 status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 blkbits = 9;
  bool has_blkbits() const;
  private:
  bool _internal_has_blkbits() const;
  public:
  void clear_blkbits();
  ::PROTOBUF_NAMESPACE_ID::uint32 blkbits() const;
  void set_blkbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blkbits() const;
  void _internal_set_blkbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 jobid = 7;
  bool has_jobid() const;
  private:
  bool _internal_has_jobid() const;
  public:
  void clear_jobid();
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid() const;
  void set_jobid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_jobid() const;
  void _internal_set_jobid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 sharediff = 8;
  bool has_sharediff() const;
  private:
  bool _internal_has_sharediff() const;
  public:
  void clear_sharediff();
  ::PROTOBUF_NAMESPACE_ID::uint64 sharediff() const;
  void set_sharediff(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sharediff() const;
  void _internal_set_sharediff(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 height = 10;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 nonce = 11;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sessionid = 12;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 versionmask = 13;
  bool has_versionmask() const;
  private:
  bool _internal_has_versionmask() const;
  public:
  void clear_versionmask();
  ::PROTOBUF_NAMESPACE_ID::uint32 versionmask() const;
  void set_versionmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_versionmask() const;
  void _internal_set_versionmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 extuserid = 14;
  bool has_extuserid() const;
  private:
  bool _internal_has_extuserid() const;
  public:
  void clear_extuserid();
  ::PROTOBUF_NAMESPACE_ID::int32 extuserid() const;
  void set_extuserid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extuserid() const;
  void _internal_set_extuserid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 bitsreached = 15;
  bool has_bitsreached() const;
  private:
  bool _internal_has_bitsreached() const;
  public:
  void clear_bitsreached();
  ::PROTOBUF_NAMESPACE_ID::uint32 bitsreached() const;
  void set_bitsreached(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bitsreached() const;
  void _internal_set_bitsreached(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:sharebase.BitcoinMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int64 workerhashid_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blkbits_;
  ::PROTOBUF_NAMESPACE_ID::uint64 jobid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sharediff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 versionmask_;
  ::PROTOBUF_NAMESPACE_ID::int32 extuserid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bitsreached_;
  friend struct ::TableStruct_qitmeer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BitcoinMsg

// required sint32 version = 1;
inline bool BitcoinMsg::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BitcoinMsg::has_version() const {
  return _internal_has_version();
}
inline void BitcoinMsg::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinMsg::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinMsg::version() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.version)
  return _internal_version();
}
inline void BitcoinMsg::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void BitcoinMsg::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.version)
}

// optional sint64 workerhashid = 2;
inline bool BitcoinMsg::_internal_has_workerhashid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BitcoinMsg::has_workerhashid() const {
  return _internal_has_workerhashid();
}
inline void BitcoinMsg::clear_workerhashid() {
  workerhashid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BitcoinMsg::_internal_workerhashid() const {
  return workerhashid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BitcoinMsg::workerhashid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.workerhashid)
  return _internal_workerhashid();
}
inline void BitcoinMsg::_internal_set_workerhashid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  workerhashid_ = value;
}
inline void BitcoinMsg::set_workerhashid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_workerhashid(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.workerhashid)
}

// optional sint32 userid = 3;
inline bool BitcoinMsg::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BitcoinMsg::has_userid() const {
  return _internal_has_userid();
}
inline void BitcoinMsg::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinMsg::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinMsg::userid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.userid)
  return _internal_userid();
}
inline void BitcoinMsg::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  userid_ = value;
}
inline void BitcoinMsg::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.userid)
}

// optional sint32 status = 4;
inline bool BitcoinMsg::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BitcoinMsg::has_status() const {
  return _internal_has_status();
}
inline void BitcoinMsg::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinMsg::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinMsg::status() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.status)
  return _internal_status();
}
inline void BitcoinMsg::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void BitcoinMsg::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.status)
}

// optional sint64 timestamp = 5;
inline bool BitcoinMsg::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BitcoinMsg::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void BitcoinMsg::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BitcoinMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BitcoinMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.timestamp)
  return _internal_timestamp();
}
inline void BitcoinMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void BitcoinMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.timestamp)
}

// optional string ip = 6;
inline bool BitcoinMsg::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BitcoinMsg::has_ip() const {
  return _internal_has_ip();
}
inline void BitcoinMsg::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BitcoinMsg::ip() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.ip)
  return _internal_ip();
}
inline void BitcoinMsg::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.ip)
}
inline std::string* BitcoinMsg::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:sharebase.BitcoinMsg.ip)
  return _internal_mutable_ip();
}
inline const std::string& BitcoinMsg::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void BitcoinMsg::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BitcoinMsg::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sharebase.BitcoinMsg.ip)
}
inline void BitcoinMsg::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sharebase.BitcoinMsg.ip)
}
inline void BitcoinMsg::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sharebase.BitcoinMsg.ip)
}
inline std::string* BitcoinMsg::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BitcoinMsg::release_ip() {
  // @@protoc_insertion_point(field_release:sharebase.BitcoinMsg.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BitcoinMsg::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:sharebase.BitcoinMsg.ip)
}

// optional uint64 jobid = 7;
inline bool BitcoinMsg::_internal_has_jobid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BitcoinMsg::has_jobid() const {
  return _internal_has_jobid();
}
inline void BitcoinMsg::clear_jobid() {
  jobid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BitcoinMsg::_internal_jobid() const {
  return jobid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BitcoinMsg::jobid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.jobid)
  return _internal_jobid();
}
inline void BitcoinMsg::_internal_set_jobid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  jobid_ = value;
}
inline void BitcoinMsg::set_jobid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_jobid(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.jobid)
}

// optional uint64 sharediff = 8;
inline bool BitcoinMsg::_internal_has_sharediff() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BitcoinMsg::has_sharediff() const {
  return _internal_has_sharediff();
}
inline void BitcoinMsg::clear_sharediff() {
  sharediff_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BitcoinMsg::_internal_sharediff() const {
  return sharediff_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BitcoinMsg::sharediff() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.sharediff)
  return _internal_sharediff();
}
inline void BitcoinMsg::_internal_set_sharediff(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  sharediff_ = value;
}
inline void BitcoinMsg::set_sharediff(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sharediff(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.sharediff)
}

// optional uint32 blkbits = 9;
inline bool BitcoinMsg::_internal_has_blkbits() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BitcoinMsg::has_blkbits() const {
  return _internal_has_blkbits();
}
inline void BitcoinMsg::clear_blkbits() {
  blkbits_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::_internal_blkbits() const {
  return blkbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::blkbits() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.blkbits)
  return _internal_blkbits();
}
inline void BitcoinMsg::_internal_set_blkbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  blkbits_ = value;
}
inline void BitcoinMsg::set_blkbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blkbits(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.blkbits)
}

// optional uint32 height = 10;
inline bool BitcoinMsg::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BitcoinMsg::has_height() const {
  return _internal_has_height();
}
inline void BitcoinMsg::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::height() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.height)
  return _internal_height();
}
inline void BitcoinMsg::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
}
inline void BitcoinMsg::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.height)
}

// optional uint32 nonce = 11;
inline bool BitcoinMsg::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BitcoinMsg::has_nonce() const {
  return _internal_has_nonce();
}
inline void BitcoinMsg::clear_nonce() {
  nonce_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::nonce() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.nonce)
  return _internal_nonce();
}
inline void BitcoinMsg::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  nonce_ = value;
}
inline void BitcoinMsg::set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.nonce)
}

// optional uint32 sessionid = 12;
inline bool BitcoinMsg::_internal_has_sessionid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BitcoinMsg::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void BitcoinMsg::clear_sessionid() {
  sessionid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::sessionid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.sessionid)
  return _internal_sessionid();
}
inline void BitcoinMsg::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  sessionid_ = value;
}
inline void BitcoinMsg::set_sessionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.sessionid)
}

// optional uint32 versionmask = 13;
inline bool BitcoinMsg::_internal_has_versionmask() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BitcoinMsg::has_versionmask() const {
  return _internal_has_versionmask();
}
inline void BitcoinMsg::clear_versionmask() {
  versionmask_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::_internal_versionmask() const {
  return versionmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::versionmask() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.versionmask)
  return _internal_versionmask();
}
inline void BitcoinMsg::_internal_set_versionmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  versionmask_ = value;
}
inline void BitcoinMsg::set_versionmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_versionmask(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.versionmask)
}

// optional sint32 extuserid = 14;
inline bool BitcoinMsg::_internal_has_extuserid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BitcoinMsg::has_extuserid() const {
  return _internal_has_extuserid();
}
inline void BitcoinMsg::clear_extuserid() {
  extuserid_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinMsg::_internal_extuserid() const {
  return extuserid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BitcoinMsg::extuserid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.extuserid)
  return _internal_extuserid();
}
inline void BitcoinMsg::_internal_set_extuserid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  extuserid_ = value;
}
inline void BitcoinMsg::set_extuserid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extuserid(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.extuserid)
}

// optional uint32 bitsreached = 15;
inline bool BitcoinMsg::_internal_has_bitsreached() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BitcoinMsg::has_bitsreached() const {
  return _internal_has_bitsreached();
}
inline void BitcoinMsg::clear_bitsreached() {
  bitsreached_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::_internal_bitsreached() const {
  return bitsreached_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitcoinMsg::bitsreached() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.bitsreached)
  return _internal_bitsreached();
}
inline void BitcoinMsg::_internal_set_bitsreached(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  bitsreached_ = value;
}
inline void BitcoinMsg::set_bitsreached(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bitsreached(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.bitsreached)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sharebase

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_qitmeer_2eproto
