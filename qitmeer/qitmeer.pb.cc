// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qitmeer.proto

#include "qitmeer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sharebase {
class BitcoinMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitcoinMsg> _instance;
} _BitcoinMsg_default_instance_;
}  // namespace sharebase
static void InitDefaultsscc_info_BitcoinMsg_qitmeer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sharebase::_BitcoinMsg_default_instance_;
    new (ptr) ::sharebase::BitcoinMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sharebase::BitcoinMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitcoinMsg_qitmeer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BitcoinMsg_qitmeer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_qitmeer_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_qitmeer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_qitmeer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_qitmeer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, version_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, workerhashid_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, userid_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, status_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, ip_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, jobid_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, sharediff_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, blkbits_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, height_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, nonce_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, sessionid_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, versionmask_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, extuserid_),
  PROTOBUF_FIELD_OFFSET(::sharebase::BitcoinMsg, bitsreached_),
  2,
  1,
  3,
  5,
  4,
  0,
  7,
  8,
  6,
  9,
  10,
  11,
  12,
  13,
  14,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::sharebase::BitcoinMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sharebase::_BitcoinMsg_default_instance_),
};

const char descriptor_table_protodef_qitmeer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rqitmeer.proto\022\tsharebase\"\224\002\n\nBitcoinMs"
  "g\022\017\n\007version\030\001 \002(\021\022\024\n\014workerhashid\030\002 \001(\022"
  "\022\016\n\006userid\030\003 \001(\021\022\016\n\006status\030\004 \001(\021\022\021\n\ttime"
  "stamp\030\005 \001(\022\022\n\n\002ip\030\006 \001(\t\022\r\n\005jobid\030\007 \001(\004\022\021"
  "\n\tsharediff\030\010 \001(\004\022\017\n\007blkbits\030\t \001(\r\022\016\n\006he"
  "ight\030\n \001(\r\022\r\n\005nonce\030\013 \001(\r\022\021\n\tsessionid\030\014"
  " \001(\r\022\023\n\013versionmask\030\r \001(\r\022\021\n\textuserid\030\016"
  " \001(\021\022\023\n\013bitsreached\030\017 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_qitmeer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_qitmeer_2eproto_sccs[1] = {
  &scc_info_BitcoinMsg_qitmeer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_qitmeer_2eproto_once;
static bool descriptor_table_qitmeer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qitmeer_2eproto = {
  &descriptor_table_qitmeer_2eproto_initialized, descriptor_table_protodef_qitmeer_2eproto, "qitmeer.proto", 305,
  &descriptor_table_qitmeer_2eproto_once, descriptor_table_qitmeer_2eproto_sccs, descriptor_table_qitmeer_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_qitmeer_2eproto::offsets,
  file_level_metadata_qitmeer_2eproto, 1, file_level_enum_descriptors_qitmeer_2eproto, file_level_service_descriptors_qitmeer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_qitmeer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_qitmeer_2eproto), true);
namespace sharebase {

// ===================================================================

void BitcoinMsg::InitAsDefaultInstance() {
}
class BitcoinMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<BitcoinMsg>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_workerhashid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jobid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sharediff(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_blkbits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_versionmask(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_extuserid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bitsreached(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

BitcoinMsg::BitcoinMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sharebase.BitcoinMsg)
}
BitcoinMsg::BitcoinMsg(const BitcoinMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&workerhashid_, &from.workerhashid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitsreached_) -
    reinterpret_cast<char*>(&workerhashid_)) + sizeof(bitsreached_));
  // @@protoc_insertion_point(copy_constructor:sharebase.BitcoinMsg)
}

void BitcoinMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitcoinMsg_qitmeer_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&workerhashid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitsreached_) -
      reinterpret_cast<char*>(&workerhashid_)) + sizeof(bitsreached_));
}

BitcoinMsg::~BitcoinMsg() {
  // @@protoc_insertion_point(destructor:sharebase.BitcoinMsg)
  SharedDtor();
}

void BitcoinMsg::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BitcoinMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitcoinMsg& BitcoinMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitcoinMsg_qitmeer_2eproto.base);
  return *internal_default_instance();
}


void BitcoinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:sharebase.BitcoinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&workerhashid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jobid_) -
        reinterpret_cast<char*>(&workerhashid_)) + sizeof(jobid_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&sharediff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bitsreached_) -
        reinterpret_cast<char*>(&sharediff_)) + sizeof(bitsreached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BitcoinMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required sint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 workerhashid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_workerhashid(&has_bits);
          workerhashid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 userid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_ip(), ptr, ctx, "sharebase.BitcoinMsg.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 jobid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_jobid(&has_bits);
          jobid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sharediff = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sharediff(&has_bits);
          sharediff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blkbits = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_blkbits(&has_bits);
          blkbits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sessionid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sessionid(&has_bits);
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 versionmask = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_versionmask(&has_bits);
          versionmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 extuserid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_extuserid(&has_bits);
          extuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bitsreached = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_bitsreached(&has_bits);
          bitsreached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BitcoinMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharebase.BitcoinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_version(), target);
  }

  // optional sint64 workerhashid = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->_internal_workerhashid(), target);
  }

  // optional sint32 userid = 3;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_userid(), target);
  }

  // optional sint32 status = 4;
  if (cached_has_bits & 0x00000020u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_status(), target);
  }

  // optional sint64 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // optional string ip = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sharebase.BitcoinMsg.ip");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ip(), target);
  }

  // optional uint64 jobid = 7;
  if (cached_has_bits & 0x00000080u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_jobid(), target);
  }

  // optional uint64 sharediff = 8;
  if (cached_has_bits & 0x00000100u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_sharediff(), target);
  }

  // optional uint32 blkbits = 9;
  if (cached_has_bits & 0x00000040u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_blkbits(), target);
  }

  // optional uint32 height = 10;
  if (cached_has_bits & 0x00000200u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_height(), target);
  }

  // optional uint32 nonce = 11;
  if (cached_has_bits & 0x00000400u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_nonce(), target);
  }

  // optional uint32 sessionid = 12;
  if (cached_has_bits & 0x00000800u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sessionid(), target);
  }

  // optional uint32 versionmask = 13;
  if (cached_has_bits & 0x00001000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_versionmask(), target);
  }

  // optional sint32 extuserid = 14;
  if (cached_has_bits & 0x00002000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(14, this->_internal_extuserid(), target);
  }

  // optional uint32 bitsreached = 15;
  if (cached_has_bits & 0x00004000u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_bitsreached(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharebase.BitcoinMsg)
  return target;
}

size_t BitcoinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sharebase.BitcoinMsg)
  size_t total_size = 0;

  // required sint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ip = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional sint64 workerhashid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_workerhashid());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional sint32 userid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_userid());
    }

    // optional sint64 timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_timestamp());
    }

    // optional sint32 status = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_status());
    }

    // optional uint32 blkbits = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blkbits());
    }

    // optional uint64 jobid = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_jobid());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint64 sharediff = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sharediff());
    }

    // optional uint32 height = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 nonce = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nonce());
    }

    // optional uint32 sessionid = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sessionid());
    }

    // optional uint32 versionmask = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_versionmask());
    }

    // optional sint32 extuserid = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_extuserid());
    }

    // optional uint32 bitsreached = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bitsreached());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitcoinMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sharebase.BitcoinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BitcoinMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitcoinMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sharebase.BitcoinMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sharebase.BitcoinMsg)
    MergeFrom(*source);
  }
}

void BitcoinMsg::MergeFrom(const BitcoinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sharebase.BitcoinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      workerhashid_ = from.workerhashid_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      blkbits_ = from.blkbits_;
    }
    if (cached_has_bits & 0x00000080u) {
      jobid_ = from.jobid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      sharediff_ = from.sharediff_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      nonce_ = from.nonce_;
    }
    if (cached_has_bits & 0x00000800u) {
      sessionid_ = from.sessionid_;
    }
    if (cached_has_bits & 0x00001000u) {
      versionmask_ = from.versionmask_;
    }
    if (cached_has_bits & 0x00002000u) {
      extuserid_ = from.extuserid_;
    }
    if (cached_has_bits & 0x00004000u) {
      bitsreached_ = from.bitsreached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitcoinMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sharebase.BitcoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinMsg::CopyFrom(const BitcoinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sharebase.BitcoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void BitcoinMsg::InternalSwap(BitcoinMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(workerhashid_, other->workerhashid_);
  swap(version_, other->version_);
  swap(userid_, other->userid_);
  swap(timestamp_, other->timestamp_);
  swap(status_, other->status_);
  swap(blkbits_, other->blkbits_);
  swap(jobid_, other->jobid_);
  swap(sharediff_, other->sharediff_);
  swap(height_, other->height_);
  swap(nonce_, other->nonce_);
  swap(sessionid_, other->sessionid_);
  swap(versionmask_, other->versionmask_);
  swap(extuserid_, other->extuserid_);
  swap(bitsreached_, other->bitsreached_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BitcoinMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sharebase
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sharebase::BitcoinMsg* Arena::CreateMaybeMessage< ::sharebase::BitcoinMsg >(Arena* arena) {
  return Arena::CreateInternal< ::sharebase::BitcoinMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
